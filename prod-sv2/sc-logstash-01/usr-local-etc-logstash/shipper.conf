input {
  redis {
    host => "10.20.23.64"
    type => "redis-input"
    # these settings should match the output of the agent
    data_type => "list"
    key => "logstash"
    # We use json_event here since the sender is a logstash agent
    message_format => "json_event"
  }
}

output {
#  stdout { debug => true debug_format => "json"}
  elasticsearch {
    host => "10.20.23.64"
    cluster => "logstash"
  }
}
dballinger@sc-logstash-01:/usr/local/etc/logstash> more shipper.conf
input {
  tcp {
    type => "iis"
    port => 6381
    format => json
    #Disable timeouts as logstash may drop events when timing out
    data_timeout => -1
  }
  tcp {
    type => "Win32-Eventlog"
    port => 6380
    format => json
    #Disable timeouts as logstash may drop events when timing out
    data_timeout => -1
  }
#  gelf {
#       debug => true
#       host => "0.0.0.0"
#       format => plain
#       port => 5515
#       type => gelf
#  }
}

filter {
  date {
    type => "iis"
    # Try to pull the timestamp from the 'timestamp' field (parsed above with
    # grok). The IIS time format looks like: "2012-06-07 15:58:09"
#    EventTime => "yyyy-MM-dd HH:mm:ss"
#    match => [ "EventTime", "yyyy-MM-dd HH:mm:ss" ]
  }
  date {
    type => "Win32-Eventlog"
    # Try to pull the timestamp from the 'timestamp' field (parsed above with
    # grok). The IIS time format looks like: "2012-06-07 15:58:09"
#    EventTime => "yyyy-MM-dd HH:mm:ss"
#    match => [ "EventTime", "yyyy-MM-dd HH:mm:ss" ]
  }
}

output {
  redis {
    host => "127.0.0.1"
#    type => "redis-input"
    # these settings should match the output of the agent
    data_type => "list"
    key => "logstash"
    # We use json_event here since the sender is a logstash agent
#    message_format => "json_event"
  }
}
